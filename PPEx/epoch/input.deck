#input deck by Ming Zeng. Email: chippen8888@gmail.com
begin:constant
  cells_x = 1024
  cells_y = 96
  cells_z = 96
  ppc_x = 2
  ppc_y = 2
  ppc_z = 1
  ppc = ppc_x * ppc_y * ppc_z
  plasma_skin_depth = 2.6575 * micron
  plasma_time_unit = plasma_skin_depth / c
  plasma_omega = c / plasma_skin_depth
  density_unit = critical(plasma_omega)
# laser amplitude at focus
  laser_a0 = 19
  laser_wavelength = 0.8 * micron
  laser_omega = 2. * pi * c / laser_wavelength
# waist at focus
  laser_waist = 9. * micron
  laser_duration = 40. * femto
  box_length_x = 50. * micron
  box_half_length_y = 400. * micron
# plasma up ramp length
  url = 100. * micron
# plasma flat-top length
  ftl = 2450. * micron
# The distance from the injection boundary to the focus. If the injection boundary is after the focus, this value should be negative.
  laser_distance_to_focus = -2317.0 * micron
# Rayleigh length
  Z_R = pi * laser_waist^2 / laser_wavelength
# laser radius at the injection boundary
  laser_W = laser_waist * sqrt(1 + (laser_distance_to_focus / Z_R)^2)
# laser amplitude at the injection boundary
laser_a = laser_a0 * laser_waist / laser_W
  laser_radius_curvature = laser_distance_to_focus * (1 + (Z_R / laser_distance_to_focus)^2)
  pi_div_laser_radius_curvature_div_lambda = pi / laser_radius_curvature / laser_wavelength
  Gouy_phase = atan(laser_distance_to_focus / Z_R)
# simulation time end
  time_end = 1020. * plasma_time_unit
end:constant

begin:control
  restart_snapshot = 16
  nx = cells_x
  ny = cells_y
  nz = cells_z
  t_end = time_end

  # size of domain
  x_min = -1. * url
  x_max = box_length_x + x_min
  y_min = -1. * box_half_length_y
  y_max = box_half_length_y
  z_min = y_min
  z_max = y_max

  dt_multiplier = 1.0-1.0e-6
  dlb_threshold = 0.4
  stdout_frequency = 1024
  field_ionisation = T
end:control

begin:boundaries
  bc_x_min = simple_laser
  bc_x_max = open
  bc_y_min = open
  bc_y_max = open
  bc_z_min = open
  bc_z_max = open
end:boundaries

begin:species
  name = ele
  charge = -1.0
  mass = 1.0
  npart_per_cell = ppc
  density_min = 1.e-3 * density_unit
  density = if((x lt -1.*url) or (x gt ftl+url), 0., 1.)
  density = if((x gt -1.*url) and (x lt 0.), (1+cos(x * pi / url))/2., density(ele))
  density = if((x gt ftl) and (x lt ftl+url), (1+cos((x-ftl) * pi / url))/2., density(ele))
  density = if((abs(y) gt 0.99 * box_half_length_y) or (abs(z) gt 0.99 * box_half_length_y), 0., density(ele))
  density = density_unit * density(ele)
#  dumpmask = never
end:species

begin:species
  charge = -1.0
  mass = 1.0
  name = N_ele
  npart_per_cell = ppc
  density_min = 1.e-3 * density_unit
#  density = 0.
end:species

begin:species
  charge = 5.0
  mass = 1837.2 * 7.
  name = N
  immobile = T
  ionisation_energies = (552.0718 * ev, 667.046 * ev)
  ionisation_electron_species = (N_ele, N_ele)
  npart_per_cell = ppc
  density_min = 1.e-3 * density_unit
#  density = density(ele) / 7. / 10.0
  rho = density(ele) / 5.0
#  dumpmask = never
end:species

begin:laser
  boundary = x_min
  omega = laser_omega
  amp = laser_a * laser_omega * 0.00170450901
##0.00170450901 = me * c / qe
  phase = (y^2+z^2) * pi_div_laser_radius_curvature_div_lambda - Gouy_phase
  pol = 0.
  profile = gauss(y, 0., laser_W) * gauss(z, 0., laser_W) * gauss(time, laser_duration * 2., laser_duration)
  t_start = 0.0
  t_end = 6. * laser_duration
end:laser

begin:window
  move_window = T
  window_v_x = c*(1.0-2.0e-3)
  window_start_time = box_length_x / c
  bc_x_min_after_move = simple_outflow
  bc_x_max_after_move = simple_outflow
end:window

begin:output
  time_start = 0.
  # number of timesteps between output dumps
  dt_snapshot = 64. * plasma_time_unit
  force_last_to_be_restartable = T
  restart_dump_every = 1

  particles = always
  px = always
  py = always
  pz = always
  particle_weight = always
# Properties on grid
  ex = always
  ey = always
#  ez = always
#  bz = always
  number_density = always + species + no_sum
end:output
